apiVersion: v1
kind: Namespace
metadata:
  name: {{ .PVCSINamespace }}
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: vsphere-csi-controller
  namespace: {{ .PVCSINamespace }}
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: vsphere-csi-controller-role
rules:
  - apiGroups: [""]
    resources: ["nodes", "persistentvolumeclaims", "pods"]
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources: ["persistentvolumes"]
    verbs: ["get", "list", "watch", "create", "update", "delete"]
  - apiGroups: [""]
    resources: ["events"]
    verbs: ["get", "list", "watch", "create", "update", "patch"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["get", "watch", "list", "delete", "update", "create"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses", "csinodes"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["volumeattachments"]
    verbs: ["get", "list", "watch", "update"]
  - apiGroups: ["policy"]
    resources: ["podsecuritypolicies"]
    verbs: ["use"]
    resourceNames: ["vmware-system-privileged"]
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: vsphere-csi-node-role
  namespace: {{ .PVCSINamespace }}
rules:
  - apiGroups:
    - "policy"
    resources:
    - podsecuritypolicies
    verbs:
    - use
    resourceNames:
    - vmware-system-privileged
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: vsphere-csi-controller-binding
subjects:
  - kind: ServiceAccount
    name: vsphere-csi-controller
    namespace: {{ .PVCSINamespace }}
roleRef:
  kind: ClusterRole
  name: vsphere-csi-controller-role
  apiGroup: rbac.authorization.k8s.io
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: vsphere-csi-node-binding
  namespace: {{ .PVCSINamespace }}
subjects:
  - kind: ServiceAccount
    name: default
    namespace: {{ .PVCSINamespace }}
roleRef:
  kind: Role
  name: vsphere-csi-node-role
  apiGroup: rbac.authorization.k8s.io
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: vsphere-csi-controller
  namespace: {{ .PVCSINamespace }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: vsphere-csi-controller
  template:
    metadata:
      labels:
        app: vsphere-csi-controller
        role: vsphere-csi
    spec:
      serviceAccountName: vsphere-csi-controller
      nodeSelector:
        node-role.kubernetes.io/master: ""
      tolerations:
        - operator: "Exists"
          key: node-role.kubernetes.io/master
          effect: NoSchedule
      containers:
        - name: csi-attacher
          image: vmware.io/csi-attacher/csi-attacher:<image_tag>
          args:
            - "--v=4"
            - "--timeout=300s"
            - "--csi-address=$(ADDRESS)"
            - "--leader-election"
            - "--leader-election-type=leases"
          imagePullPolicy: "IfNotPresent"
          env:
            - name: ADDRESS
              value: /csi/csi.sock
          volumeMounts:
            - mountPath: /csi
              name: socket-dir
        - name: vsphere-csi-controller
          image: vmware.io/vsphere-csi:<image_tag>
          lifecycle:
            preStop:
              exec:
                command: ["/bin/sh", "-c", "rm -rf /var/lib/csi/sockets/pluginproxy/csi.vsphere.vmware.com"]
          imagePullPolicy: "IfNotPresent"
          env:
            - name: CSI_ENDPOINT
              value: unix:///var/lib/csi/sockets/pluginproxy/csi.sock
            - name: CLUSTER_FLAVOR
              value: "GUEST_CLUSTER"
            - name: X_CSI_MODE
              value: "controller"
            - name: GC_CONFIG
              value: /etc/cloud/pvcsi-config/cns-csi.conf
            - name: PROVISION_TIMEOUT_MINUTES
              value: "4"
            - name: ATTACHER_TIMEOUT_MINUTES
              value: "4"
            - name: LOGGER_LEVEL
              value: "PRODUCTION" # Options: DEVELOPMENT, PRODUCTION
          volumeMounts:
            - mountPath: /etc/cloud/pvcsi-provider
              name: pvcsi-provider-volume
              readOnly: true
            - mountPath: /etc/cloud/pvcsi-config
              name: pvcsi-config-volume
              readOnly: true
            - mountPath: /var/lib/csi/sockets/pluginproxy/
              name: socket-dir
        - name: vsphere-syncer
          image: vmware.io/syncer:<image_tag>
          args:
            - "--leader-election"
          imagePullPolicy: "IfNotPresent"
          env:
            - name: FULL_SYNC_INTERVAL_MINUTES
              value: "30"
            - name: GC_CONFIG
              value: /etc/cloud/pvcsi-config/cns-csi.conf
            - name: CLUSTER_FLAVOR
              value: "GUEST_CLUSTER"
            - name: LOGGER_LEVEL
              value: "PRODUCTION" # Options: DEVELOPMENT, PRODUCTION
          volumeMounts:
          - mountPath: /etc/cloud/pvcsi-provider
            name: pvcsi-provider-volume
            readOnly: true
          - mountPath: /etc/cloud/pvcsi-config
            name: pvcsi-config-volume
            readOnly: true
        - name: liveness-probe
          image: vmware.io/csi-livenessprobe/csi-livenessprobe:<image_tag>
          args:
            - "--csi-address=$(ADDRESS)"
          imagePullPolicy: "IfNotPresent"
          env:
            - name: ADDRESS
              value: /var/lib/csi/sockets/pluginproxy/csi.sock
          volumeMounts:
            - mountPath: /var/lib/csi/sockets/pluginproxy/
              name: socket-dir
        - name: csi-provisioner
          image: vmware.io/csi-provisioner/csi-provisioner:<image_tag>
          args:
            - "--v=4"
            - "--timeout=300s"
            - "--csi-address=$(ADDRESS)"
            - "--enable-leader-election"
            - "--leader-election-type=leases"
          imagePullPolicy: "IfNotPresent"
          env:
            - name: ADDRESS
              value: /csi/csi.sock
          volumeMounts:
            - mountPath: /csi
              name: socket-dir
      volumes:
         - name: pvcsi-provider-volume
           secret:
             secretName: pvcsi-provider-creds
         - name: pvcsi-config-volume
           configMap:
             name: pvcsi-config
         - name: socket-dir
           hostPath:
             path: /var/lib/csi/sockets/pluginproxy/csi.vsphere.vmware.com
             type: DirectoryOrCreate
---
apiVersion: storage.k8s.io/v1beta1
kind: CSIDriver
metadata:
  name: csi.vsphere.vmware.com
spec:
  attachRequired: true
  podInfoOnMount: false
---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: vsphere-csi-node
  namespace: {{ .PVCSINamespace }}
spec:
  selector:
    matchLabels:
      app: vsphere-csi-node
  updateStrategy:
    type: "RollingUpdate"
  template:
    metadata:
      labels:
        app: vsphere-csi-node
        role: vsphere-csi
    spec:
      containers:
      - name: node-driver-registrar
        image: vmware.io/csi-node-driver-registrar:<image_tag>
        imagePullPolicy: "IfNotPresent"
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "rm -rf /registration/csi.vsphere.vmware.com /var/lib/kubelet/plugins_registry/csi.vsphere.vmware.com /var/lib/kubelet/plugins_registry/csi.vsphere.vmware.com-reg.sock"]
        args:
          - "--v=5"
          - "--csi-address=$(ADDRESS)"
          - "--kubelet-registration-path=$(DRIVER_REG_SOCK_PATH)"
        env:
          - name: ADDRESS
            value: /csi/csi.sock
          - name: DRIVER_REG_SOCK_PATH
            value: /var/lib/kubelet/plugins_registry/csi.vsphere.vmware.com/csi.sock
        securityContext:
          privileged: true
        volumeMounts:
          - name: plugin-dir
            mountPath: /csi
          - name: registration-dir
            mountPath: /registration
      - name: vsphere-csi-node
        image: vmware.io/vsphere-csi:<image_tag>
        imagePullPolicy: "IfNotPresent"
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: CSI_ENDPOINT
          value: unix:///csi/csi.sock
        - name: X_CSI_MODE
          value: "node"
        - name: X_CSI_SPEC_REQ_VALIDATION
          value: "false"
        - name: CLUSTER_FLAVOR
          value: "GUEST_CLUSTER"
        - name: LOGGER_LEVEL
          value: "PRODUCTION" # Options: DEVELOPMENT, PRODUCTION
        securityContext:
          privileged: true
          capabilities:
            add: ["SYS_ADMIN"]
          allowPrivilegeEscalation: true
        volumeMounts:
        - name: plugin-dir
          mountPath: /csi
        - name: pods-mount-dir
          mountPath: /var/lib/kubelet
          mountPropagation: "Bidirectional"
        - name: device-dir
          mountPath: /dev
      - name: liveness-probe
        image: vmware.io/csi-livenessprobe/csi-livenessprobe:<image_tag>
        args:
        - "--csi-address=$(ADDRESS)"
        imagePullPolicy: "IfNotPresent"
        env:
        - name: ADDRESS
          value: /csi/csi.sock
        volumeMounts:
        - name: plugin-dir
          mountPath: /csi
      volumes:
      - name: registration-dir
        hostPath:
          path: /var/lib/kubelet/plugins_registry
          type: DirectoryOrCreate
      - name: plugin-dir
        hostPath:
          path: /var/lib/kubelet/plugins_registry/csi.vsphere.vmware.com
          type: DirectoryOrCreate
      - name: pods-mount-dir
        hostPath:
          path: /var/lib/kubelet
          type: Directory
      - name: device-dir
        hostPath:
          path: /dev
---
apiVersion: v1
data:
  cns-csi.conf: |
    [GC]
    endpoint = "{{ .SupervisorMasterEndpointHostName }}"
    port = "{{ .SupervisorMasterPort }}"
    tanzukubernetescluster-uid = "{{ .TanzuKubernetesClusterUID }}"
    tanzukubernetescluster-name = "{{ .TanzuKubernetesClusterName }}"
kind: ConfigMap
metadata:
  name: pvcsi-config
  namespace: {{ .PVCSINamespace }}
---
