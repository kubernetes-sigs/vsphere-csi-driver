/*
Copyright 2025 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by operator-sdk. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto copies all properties from the source into the target.
func (in *CnsNodeVMBatchAttachment) DeepCopyInto(out *CnsNodeVMBatchAttachment) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy creates a new CnsNodeVMBatchAttachment.
func (in *CnsNodeVMBatchAttachment) DeepCopy() *CnsNodeVMBatchAttachment {
	if in == nil {
		return nil
	}
	out := new(CnsNodeVMBatchAttachment)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject creates a new runtime.Object from the CnsNodeVMBatchAttachment.
func (in *CnsNodeVMBatchAttachment) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto copies all properties from the source into the target.
func (in *CnsNodeVMBatchAttachmentList) DeepCopyInto(out *CnsNodeVMBatchAttachmentList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	out.ListMeta = in.ListMeta
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]CnsNodeVMBatchAttachment, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy creates a new CnsNodeVMBatchAttachmentList.
func (in *CnsNodeVMBatchAttachmentList) DeepCopy() *CnsNodeVMBatchAttachmentList {
	if in == nil {
		return nil
	}
	out := new(CnsNodeVMBatchAttachmentList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject creates a new runtime.Object from the CnsNodeVMBatchAttachmentList.
func (in *CnsNodeVMBatchAttachmentList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto copies all properties from the source into the target.
func (in *CnsNodeVMBatchAttachmentSpec) DeepCopyInto(out *CnsNodeVMBatchAttachmentSpec) {
	*out = *in
	if in.Volumes != nil {
		in, out := &in.Volumes, &out.Volumes
		*out = make([]VolumeSpec, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy creates a new CnsNodeVMBatchAttachmentSpec.
func (in *CnsNodeVMBatchAttachmentSpec) DeepCopy() *CnsNodeVMBatchAttachmentSpec {
	if in == nil {
		return nil
	}
	out := new(CnsNodeVMBatchAttachmentSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto copies all properties from the source into the target.
func (in *CnsNodeVMBatchAttachmentStatus) DeepCopyInto(out *CnsNodeVMBatchAttachmentStatus) {
	*out = *in
	if in.VolumeStatus != nil {
		in, out := &in.VolumeStatus, &out.VolumeStatus
		*out = make([]VolumeStatus, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy creates a new CnsNodeVMBatchAttachmentStatus.
func (in *CnsNodeVMBatchAttachmentStatus) DeepCopy() *CnsNodeVMBatchAttachmentStatus {
	if in == nil {
		return nil
	}
	out := new(CnsNodeVMBatchAttachmentStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto copies all properties from the source into the target.
func (in *VolumeSpec) DeepCopyInto(out *VolumeSpec) {
	*out = *in
	in.PersistentVolumeClaim.DeepCopyInto(&out.PersistentVolumeClaim)
}

// DeepCopy creates a new VolumeSpec.
func (in *VolumeSpec) DeepCopy() *VolumeSpec {
	if in == nil {
		return nil
	}
	out := new(VolumeSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto copies all properties from the source into the target.
func (in *PersistentVolumeClaimSpec) DeepCopyInto(out *PersistentVolumeClaimSpec) {
	*out = *in
}

// DeepCopy creates a new PersistentVolumeClaimSpec.
func (in *PersistentVolumeClaimSpec) DeepCopy() *PersistentVolumeClaimSpec {
	if in == nil {
		return nil
	}
	out := new(PersistentVolumeClaimSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto copies all properties from the source into the target.
func (in *VolumeStatus) DeepCopyInto(out *VolumeStatus) {
	*out = *in
	in.PersistentVolumeClaim.DeepCopyInto(&out.PersistentVolumeClaim)
}

// DeepCopy creates a new VolumeStatus.
func (in *VolumeStatus) DeepCopy() *VolumeStatus {
	if in == nil {
		return nil
	}
	out := new(VolumeStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto copies all properties from the source into the target.
func (in *PersistentVolumeClaimStatus) DeepCopyInto(out *PersistentVolumeClaimStatus) {
	*out = *in
}

// DeepCopy creates a new PersistentVolumeClaimStatus.
func (in *PersistentVolumeClaimStatus) DeepCopy() *PersistentVolumeClaimStatus {
	if in == nil {
		return nil
	}
	out := new(PersistentVolumeClaimStatus)
	in.DeepCopyInto(out)
	return out
}
