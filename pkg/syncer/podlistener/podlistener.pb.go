// Code generated by protoc-gen-go.
// source: podlistener.proto
// DO NOT EDIT!

/*
Package podlistener is a generated protocol buffer package.

It is generated from these files:
	podlistener.proto

It has these top-level messages:
	PodListenerRequest
	PodListenerResponse
*/
package podlistener

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PodListenerRequest struct {
	// The volumeID that needs to be attached to the node.
	VolumeID string `protobuf:"bytes,1,opt,name=volumeID" json:"volumeID,omitempty"`
	// Name of the node where the Pod is running.
	NodeName string `protobuf:"bytes,2,opt,name=nodeName" json:"nodeName,omitempty"`
}

func (m *PodListenerRequest) Reset()                    { *m = PodListenerRequest{} }
func (m *PodListenerRequest) String() string            { return proto.CompactTextString(m) }
func (*PodListenerRequest) ProtoMessage()               {}
func (*PodListenerRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PodListenerResponse struct {
	// VM UUID annotation of the pod.
	VmuuidAnnotation string `protobuf:"bytes,1,opt,name=vmuuidAnnotation" json:"vmuuidAnnotation,omitempty"`
}

func (m *PodListenerResponse) Reset()                    { *m = PodListenerResponse{} }
func (m *PodListenerResponse) String() string            { return proto.CompactTextString(m) }
func (*PodListenerResponse) ProtoMessage()               {}
func (*PodListenerResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*PodListenerRequest)(nil), "podlistener.PodListenerRequest")
	proto.RegisterType((*PodListenerResponse)(nil), "podlistener.PodListenerResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PodListener service

type PodListenerClient interface {
	//
	// GetPodVMUUIDAnnotation gets the PV by querying the API server refering to the volumeID in the request.
	// Retrieves the PVC name and Namespace from the PV spec.
	//
	// It then gets the vmuuid annotation from the pod satisfying the below conditions
	// 1. Pod Scheduled on node with name "nodeName"
	// 2. Pod is in pending state in the same namespace as pvc specified using "pvcNamespace"
	// 3. Pod has a volume with name "pvcName" associated with it
	//
	// The annotation might not be available immediately when the Pod is created.
	// So polling the Pod periodically every pollInterval seconds to check if annotation is available.
	// If annotation is not available after a timeout period, the function errors out.
	GetPodVMUUIDAnnotation(ctx context.Context, in *PodListenerRequest, opts ...grpc.CallOption) (*PodListenerResponse, error)
}

type podListenerClient struct {
	cc *grpc.ClientConn
}

func NewPodListenerClient(cc *grpc.ClientConn) PodListenerClient {
	return &podListenerClient{cc}
}

func (c *podListenerClient) GetPodVMUUIDAnnotation(ctx context.Context, in *PodListenerRequest, opts ...grpc.CallOption) (*PodListenerResponse, error) {
	out := new(PodListenerResponse)
	err := grpc.Invoke(ctx, "/podlistener.PodListener/GetPodVMUUIDAnnotation", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for PodListener service

type PodListenerServer interface {
	//
	// GetPodVMUUIDAnnotation gets the PV by querying the API server refering to the volumeID in the request.
	// Retrieves the PVC name and Namespace from the PV spec.
	//
	// It then gets the vmuuid annotation from the pod satisfying the below conditions
	// 1. Pod Scheduled on node with name "nodeName"
	// 2. Pod is in pending state in the same namespace as pvc specified using "pvcNamespace"
	// 3. Pod has a volume with name "pvcName" associated with it
	//
	// The annotation might not be available immediately when the Pod is created.
	// So polling the Pod periodically every pollInterval seconds to check if annotation is available.
	// If annotation is not available after a timeout period, the function errors out.
	GetPodVMUUIDAnnotation(context.Context, *PodListenerRequest) (*PodListenerResponse, error)
}

func RegisterPodListenerServer(s *grpc.Server, srv PodListenerServer) {
	s.RegisterService(&_PodListener_serviceDesc, srv)
}

func _PodListener_GetPodVMUUIDAnnotation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodListenerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PodListenerServer).GetPodVMUUIDAnnotation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/podlistener.PodListener/GetPodVMUUIDAnnotation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PodListenerServer).GetPodVMUUIDAnnotation(ctx, req.(*PodListenerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PodListener_serviceDesc = grpc.ServiceDesc{
	ServiceName: "podlistener.PodListener",
	HandlerType: (*PodListenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPodVMUUIDAnnotation",
			Handler:    _PodListener_GetPodVMUUIDAnnotation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "podlistener.proto",
}

func init() { proto.RegisterFile("podlistener.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 182 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0xc8, 0x4f, 0xc9,
	0xc9, 0x2c, 0x2e, 0x49, 0xcd, 0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x46,
	0x12, 0x52, 0xf2, 0xe1, 0x12, 0x0a, 0xc8, 0x4f, 0xf1, 0x81, 0x72, 0x83, 0x52, 0x0b, 0x4b, 0x53,
	0x8b, 0x4b, 0x84, 0xa4, 0xb8, 0x38, 0xca, 0xf2, 0x73, 0x4a, 0x73, 0x53, 0x3d, 0x5d, 0x24, 0x18,
	0x15, 0x18, 0x35, 0x38, 0x83, 0xe0, 0x7c, 0x90, 0x5c, 0x5e, 0x7e, 0x4a, 0xaa, 0x5f, 0x62, 0x6e,
	0xaa, 0x04, 0x13, 0x44, 0x0e, 0xc6, 0x57, 0x72, 0xe4, 0x12, 0x46, 0x31, 0xad, 0xb8, 0x20, 0x3f,
	0xaf, 0x38, 0x55, 0x48, 0x8b, 0x4b, 0xa0, 0x2c, 0xb7, 0xb4, 0x34, 0x33, 0xc5, 0x31, 0x2f, 0x2f,
	0xbf, 0x24, 0xb1, 0x24, 0x33, 0x3f, 0x0f, 0x6a, 0x2c, 0x86, 0xb8, 0x51, 0x0e, 0x17, 0x37, 0x92,
	0x11, 0x42, 0xb1, 0x5c, 0x62, 0xee, 0xa9, 0x25, 0x01, 0xf9, 0x29, 0x61, 0xbe, 0xa1, 0xa1, 0x9e,
	0x2e, 0x08, 0x85, 0x42, 0xf2, 0x7a, 0xc8, 0x5e, 0xc3, 0xf4, 0x84, 0x94, 0x02, 0x6e, 0x05, 0x10,
	0x77, 0x29, 0x31, 0x24, 0xb1, 0x81, 0x83, 0xc4, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x3d, 0x06,
	0xf4, 0xa5, 0x27, 0x01, 0x00, 0x00,
}
